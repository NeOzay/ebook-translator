"""
Validation interactive du glossaire avant la Phase 2.

Ce module fournit une interface interactive pour :
- Afficher les statistiques du glossaire apr√®s Phase 1
- D√©tecter et r√©soudre les conflits terminologiques
- Permettre la validation manuelle des traductions
- Bloquer la transition Phase 1 ‚Üí Phase 2 jusqu'√† validation compl√®te
"""

from typing import TYPE_CHECKING

from ..logger import get_logger

if TYPE_CHECKING:
    from ..glossary import Glossary

logger = get_logger(__name__)


class GlossaryValidator:
    """
    Validateur interactif du glossaire pour transition Phase 1 ‚Üí Phase 2.

    Responsabilit√©s:
    - Afficher le r√©sum√© du glossaire (termes appris, conflits)
    - Proposer r√©solution des conflits (choix automatique ou manuel)
    - Permettre √©dition manuelle des traductions
    - Sauvegarder le glossaire valid√©

    Example:
        >>> validator = GlossaryValidator(glossary)
        >>> is_valid = validator.validate_interactive()
        >>> if is_valid:
        ...     print("Glossaire valid√©, Phase 2 peut d√©marrer")
    """

    def __init__(self, glossary: "Glossary"):
        """
        Initialise le validateur.

        Args:
            glossary: Instance du glossaire √† valider
        """
        self.glossary = glossary

    def validate_interactive(self, auto_resolve: bool = False) -> bool:
        """
        Lance la validation interactive du glossaire.

        Args:
            auto_resolve: Si True, r√©sout automatiquement les conflits
                         en choisissant la traduction la plus fr√©quente (d√©faut: False)

        Returns:
            True si le glossaire est valid√© (aucun conflit non r√©solu)
            False si l'utilisateur annule la validation

        Example:
            >>> validator = GlossaryValidator(glossary)
            >>> if validator.validate_interactive():
            ...     # Glossaire valid√©, continuer vers Phase 2
            ...     pass
        """
        logger.info("=" * 60)
        logger.info("üìö VALIDATION DU GLOSSAIRE")
        logger.info("=" * 60)

        # Afficher statistiques
        self._display_statistics()

        # D√©tecter conflits
        conflicts = self.glossary.get_conflicts()

        if not conflicts:
            logger.info("‚úÖ Aucun conflit d√©tect√© dans le glossaire")
            self._display_sample_terms()
            return self._confirm_validation()

        # Conflits d√©tect√©s
        logger.warning(f"‚ö†Ô∏è  {len(conflicts)} terme(s) avec traductions conflictuelles d√©tect√©(s)")
        self._display_conflicts(conflicts)

        if auto_resolve:
            logger.info("ü§ñ R√©solution automatique des conflits...")
            self._auto_resolve_conflicts(conflicts)
            logger.info("‚úÖ Conflits r√©solus automatiquement")
            return True

        # R√©solution manuelle
        return self._resolve_conflicts_interactive(conflicts)

    def _display_statistics(self) -> None:
        """Affiche les statistiques du glossaire."""
        stats = self.glossary.get_statistics()

        logger.info(
            f"\nüìä STATISTIQUES DU GLOSSAIRE:\n"
            f"  ‚Ä¢ Termes appris: {stats['total_terms']}\n"
            f"  ‚Ä¢ Termes valid√©s: {stats['validated_terms']}\n"
            f"  ‚Ä¢ Termes en conflit: {stats['conflicting_terms']}\n"
            f"  ‚Ä¢ Traductions uniques: {stats['unique_translations']}"
        )

    def _display_sample_terms(self, max_terms: int = 10) -> None:
        """
        Affiche un √©chantillon de termes appris.

        Args:
            max_terms: Nombre maximum de termes √† afficher (d√©faut: 10)
        """
        high_conf_terms = self.glossary.get_high_confidence_terms(min_confidence=0.8)

        if not high_conf_terms:
            logger.info("\n(Aucun terme haute confiance √† afficher)")
            return

        logger.info(f"\nüìñ √âCHANTILLON DE TERMES (haute confiance >80%):")

        count = 0
        for source, translation in sorted(high_conf_terms.items()):
            if count >= max_terms:
                remaining = len(high_conf_terms) - max_terms
                if remaining > 0:
                    logger.info(f"  ... et {remaining} autre(s) terme(s)")
                break

            logger.info(f"  ‚Ä¢ {source} ‚Üí {translation}")
            count += 1

    def _display_conflicts(self, conflicts: dict[str, list[str]]) -> None:
        """
        Affiche les conflits d√©tect√©s.

        Args:
            conflicts: Dictionnaire {terme_source: [traductions_conflictuelles]}
        """
        logger.info("\n‚ö†Ô∏è  CONFLITS TERMINOLOGIQUES:")

        for source_term, translations in sorted(conflicts.items()):
            # R√©cup√©rer les compteurs pour chaque traduction
            term_data = self.glossary._glossary[source_term]
            total = sum(term_data.values())

            logger.info(f"\n  ‚Ä¢ {source_term}:")
            for trans in translations:
                count = term_data[trans]
                percentage = (count / total) * 100
                logger.info(f"    - '{trans}' ({count}√ó, {percentage:.0f}%)")

    def _auto_resolve_conflicts(self, conflicts: dict[str, list[str]]) -> None:
        """
        R√©sout automatiquement les conflits en choisissant la traduction la plus fr√©quente.

        Args:
            conflicts: Dictionnaire {terme_source: [traductions_conflictuelles]}
        """
        for source_term in conflicts:
            # R√©cup√©rer la traduction la plus fr√©quente
            most_frequent = self.glossary.get_translation(
                source_term, min_confidence=0.0
            )
            if most_frequent:
                self.glossary.validate_translation(source_term, most_frequent)
                logger.debug(
                    f"  ‚Ä¢ {source_term} ‚Üí {most_frequent} (automatique)"
                )

    def _resolve_conflicts_interactive(self, conflicts: dict[str, list[str]]) -> bool:
        """
        R√©sout les conflits de mani√®re interactive avec l'utilisateur.

        Args:
            conflicts: Dictionnaire {terme_source: [traductions_conflictuelles]}

        Returns:
            True si tous les conflits sont r√©solus, False si annul√©
        """
        logger.info("\n" + "=" * 60)
        logger.info("üîß R√âSOLUTION DES CONFLITS")
        logger.info("=" * 60)
        logger.info(
            "\nPour chaque terme en conflit, vous pouvez :\n"
            "  ‚Ä¢ Taper le num√©ro de la traduction √† utiliser\n"
            "  ‚Ä¢ Taper 'a' pour r√©soudre automatiquement (choix le plus fr√©quent)\n"
            "  ‚Ä¢ Taper 's' pour passer (r√©solution automatique √† la fin)\n"
            "  ‚Ä¢ Taper 'q' pour quitter sans valider"
        )

        skipped_terms = []

        for i, (source_term, translations) in enumerate(sorted(conflicts.items()), 1):
            term_data = self.glossary._glossary[source_term]
            total = sum(term_data.values())

            logger.info(f"\n[{i}/{len(conflicts)}] Terme: '{source_term}'")
            for j, trans in enumerate(translations, 1):
                count = term_data[trans]
                percentage = (count / total) * 100
                logger.info(f"  {j}. '{trans}' ({count}√ó, {percentage:.0f}%)")

            # Demander √† l'utilisateur
            while True:
                try:
                    choice = input("Votre choix: ").strip().lower()

                    if choice == 'q':
                        logger.warning("‚ùå Validation annul√©e par l'utilisateur")
                        return False

                    if choice == 's':
                        skipped_terms.append(source_term)
                        logger.info("‚è≠Ô∏è  Terme pass√© (r√©solution automatique √† la fin)")
                        break

                    if choice == 'a':
                        most_frequent = self.glossary.get_translation(
                            source_term, min_confidence=0.0
                        )
                        if most_frequent:
                            self.glossary.validate_translation(source_term, most_frequent)
                            logger.info(f"‚úÖ R√©solu automatiquement: {source_term} ‚Üí {most_frequent}")
                        break

                    # Choix num√©rique
                    choice_num = int(choice)
                    if 1 <= choice_num <= len(translations):
                        selected = translations[choice_num - 1]
                        self.glossary.validate_translation(source_term, selected)
                        logger.info(f"‚úÖ Valid√©: {source_term} ‚Üí {selected}")
                        break
                    else:
                        logger.warning(f"‚ö†Ô∏è  Num√©ro invalide (1-{len(translations)})")

                except ValueError:
                    logger.warning("‚ö†Ô∏è  Entr√©e invalide. Tapez un num√©ro, 'a', 's' ou 'q'")
                except KeyboardInterrupt:
                    logger.warning("\n‚ùå Validation annul√©e par l'utilisateur")
                    return False

        # R√©soudre automatiquement les termes pass√©s
        if skipped_terms:
            logger.info(f"\nü§ñ R√©solution automatique de {len(skipped_terms)} terme(s) pass√©(s)...")
            for source_term in skipped_terms:
                most_frequent = self.glossary.get_translation(
                    source_term, min_confidence=0.0
                )
                if most_frequent:
                    self.glossary.validate_translation(source_term, most_frequent)
                    logger.debug(f"  ‚Ä¢ {source_term} ‚Üí {most_frequent}")

        logger.info("\n‚úÖ Tous les conflits ont √©t√© r√©solus")
        return True

    def _confirm_validation(self) -> bool:
        """
        Demande confirmation √† l'utilisateur pour valider le glossaire.

        Returns:
            True si l'utilisateur confirme, False sinon
        """
        self._display_sample_terms()

        logger.info("\n" + "=" * 60)
        logger.info("‚ùì CONFIRMATION")
        logger.info("=" * 60)

        while True:
            try:
                choice = input(
                    "Valider ce glossaire pour la Phase 2 ? [O/n]: "
                ).strip().lower()

                if choice in ['', 'o', 'oui', 'y', 'yes']:
                    logger.info("‚úÖ Glossaire valid√©")
                    return True
                elif choice in ['n', 'non', 'no']:
                    logger.warning("‚ùå Validation annul√©e par l'utilisateur")
                    return False
                else:
                    logger.warning("‚ö†Ô∏è  R√©ponse invalide. Tapez 'O' (oui) ou 'n' (non)")

            except KeyboardInterrupt:
                logger.warning("\n‚ùå Validation annul√©e par l'utilisateur")
                return False

    def export_summary(self) -> str:
        """
        Exporte un r√©sum√© textuel du glossaire valid√©.

        Returns:
            R√©sum√© format√© pour affichage ou sauvegarde

        Example:
            >>> summary = validator.export_summary()
            >>> print(summary)
        """
        stats = self.glossary.get_statistics()
        conflicts = self.glossary.get_conflicts()

        summary = [
            "=" * 60,
            "üìö R√âSUM√â DU GLOSSAIRE VALID√â",
            "=" * 60,
            "",
            "üìä Statistiques:",
            f"  ‚Ä¢ Termes appris: {stats['total_terms']}",
            f"  ‚Ä¢ Termes valid√©s: {stats['validated_terms']}",
            f"  ‚Ä¢ Conflits r√©solus: {stats['conflicting_terms']}",
            "",
        ]

        if conflicts:
            summary.append("‚ö†Ô∏è  ATTENTION: Conflits non r√©solus:")
            for source, translations in sorted(conflicts.items()):
                summary.append(f"  ‚Ä¢ {source}: {', '.join(translations)}")
            summary.append("")

        # √âchantillon de termes haute confiance
        high_conf = self.glossary.get_high_confidence_terms(min_confidence=0.8)
        if high_conf:
            summary.append("üìñ Termes haute confiance (√©chantillon):")
            for i, (source, translation) in enumerate(sorted(high_conf.items())):
                if i >= 20:
                    remaining = len(high_conf) - 20
                    summary.append(f"  ... et {remaining} autre(s) terme(s)")
                    break
                summary.append(f"  ‚Ä¢ {source} ‚Üí {translation}")

        summary.append("=" * 60)

        return "\n".join(summary)
