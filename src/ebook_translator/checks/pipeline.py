"""
Pipeline de validation strict avec correction automatique.

Ce module orchestre l'ex√©cution s√©quentielle des checks avec
correction inline et retry automatique.
"""

from typing import TYPE_CHECKING

from ..logger import get_logger
from .base import Check, CheckResult, ValidationContext, ErrorData

if TYPE_CHECKING:
    pass

logger = get_logger(__name__)


class ValidationPipeline:
    """
    Pipeline strict de validation avec correction inline.

    Ce pipeline ex√©cute les checks de mani√®re s√©quentielle et s'arr√™te
    √† la premi√®re erreur. Si un check √©choue, il tente de corriger
    automatiquement via check.correct() et re-valide. Ce processus
    se r√©p√®te jusqu'√† max_retries.

    Flux d'ex√©cution:
    1. Ex√©cuter check‚ÇÅ.validate()
    2. Si √©chec ‚Üí check‚ÇÅ.correct() ‚Üí re-validate() (max N fois)
    3. Si succ√®s ‚Üí passer √† check‚ÇÇ
    4. R√©p√©ter jusqu'au dernier check
    5. Si tous OK ‚Üí retourner traductions finales
    6. Si √©chec apr√®s max_retries ‚Üí retourner √©chec

    Attributes:
        checks: Liste ordonn√©e des checks √† ex√©cuter

    Example:
        >>> from .line_count_check import LineCountCheck
        >>> from .fragment_count_check import FragmentCountCheck
        >>>
        >>> pipeline = ValidationPipeline([
        ...     LineCountCheck(),
        ...     FragmentCountCheck(),
        ... ])
        >>>
        >>> success, final_translations, results = pipeline.validate_and_correct(context)
        >>> if success:
        ...     store.save_all(source_file, final_translations)
        >>> else:
        ...     logger.error("Validation √©chou√©e", results)
    """

    def __init__(self, checks: list[Check]):
        """
        Initialise le pipeline avec une liste de checks.

        Args:
            checks: Liste ordonn√©e des checks √† ex√©cuter (ordre important!)

        Example:
            >>> pipeline = ValidationPipeline([
            ...     LineCountCheck(),      # V√©rifie nombre de lignes d'abord
            ...     FragmentCountCheck(),  # Puis nombre de fragments
            ... ])
        """
        self.checks = checks

    def validate_and_correct(
        self, context: ValidationContext
    ) -> tuple[bool, dict[int, str], list[CheckResult]]:
        """
        Valide et corrige les traductions avec pipeline strict.

        Cette m√©thode ex√©cute tous les checks de mani√®re s√©quentielle.
        Pour chaque check :
        - Valide les traductions actuelles
        - Si √©chec : tente correction et re-valide (max_retries fois)
        - Si succ√®s : passe au check suivant
        - Si √©chec apr√®s max_retries : arr√™te le pipeline

        Args:
            context: Contexte de validation avec chunk et traductions

        Returns:
            Tuple (success, final_translations, all_results)
            - success: True si tous checks OK, False si un check a √©chou√©
            - final_translations: Traductions finales (corrig√©es si n√©cessaire)
            - all_results: Liste de tous les CheckResult (pour logs/debug)

        Example:
            >>> context = ValidationContext(
            ...     chunk=chunk,
            ...     translated_texts={0: "Bonjour"},  # Manque ligne 1
            ...     original_texts={0: "Hello", 1: "World"},
            ...     llm=llm,
            ...     target_language="fr",
            ...     phase="initial",
            ...     max_retries=2,
            ... )
            >>>
            >>> success, final, results = pipeline.validate_and_correct(context)
            >>> # success=True si ligne 1 corrig√©e, False sinon
            >>> # final={0: "Bonjour", 1: "Monde"} si corrig√©
            >>> # results contient tous les CheckResult
        """
        # Copier traductions actuelles (seront modifi√©es par corrections)
        current_translations: dict[int, str] = dict(context.translated_texts)
        all_results: list[CheckResult] = []

        # Ex√©cuter chaque check s√©quentiellement
        for check in self.checks:
            retry_count = 0

            # Boucle de retry pour ce check
            while retry_count <= context.max_retries:
                # Mettre √† jour le contexte avec les traductions actuelles
                context.translated_texts = current_translations

                # Valider
                result = check.validate(context)
                all_results.append(result)

                if result.is_valid:
                    # Check OK ‚Üí passer au suivant
                    logger.debug(f"‚úÖ {check.name}: OK (chunk {context.chunk.index})")
                    break  # Sortir de la boucle retry

                # Check √©chou√© ‚Üí tenter correction si retries restants
                if retry_count < context.max_retries:
                    logger.warning(
                        f"‚ö†Ô∏è {check.name} √©chou√© (tentative {retry_count + 1}/{context.max_retries}): "
                        f"{result.error_message}"
                    )

                    try:
                        # Tenter correction
                        logger.debug(
                            f"üîß Correction {check.name} en cours (chunk {context.chunk.index})..."
                        )
                        current_translations = check.correct(context, result.error_data)
                        retry_count += 1

                        logger.debug(
                            f"üîÑ Correction {check.name} termin√©e, re-validation..."
                        )

                    except Exception as e:
                        # Correction impossible ‚Üí passer au filtrage
                        logger.warning(
                            f"‚ö†Ô∏è Correction {check.name} √©chou√©e (chunk {context.chunk.index}): {e}"
                        )
                        # Incr√©menter retry_count pour sortir de la boucle
                        retry_count = context.max_retries

                else:
                    # Max retries atteint ‚Üí tenter filtrage si check supporte get_invalid_lines
                    logger.warning(
                        f"‚ö†Ô∏è {check.name} √©chou√© apr√®s {context.max_retries} tentatives "
                        f"(chunk {context.chunk.index}), filtrage des lignes invalides..."
                    )

                    # Obtenir les indices des lignes invalides
                    invalid_indices = check.get_invalid_lines(
                        context, result.error_data
                    )

                    if invalid_indices:
                        # Construire FilteredLine pour chaque ligne invalide
                        self._build_filtered_lines(
                            context, check, invalid_indices, check.name, result
                        )

                        # Filtrer les traductions : retirer lignes invalides
                        current_translations = {
                            idx: text
                            for idx, text in current_translations.items()
                            if idx not in invalid_indices
                        }

                        # Filtrer original_texts aussi
                        context.original_texts = {
                            idx: text
                            for idx, text in context.original_texts.items()
                            if idx not in invalid_indices
                        }

                        logger.warning(
                            f"üîß {check.name} chunk {context.chunk.index}: {len(invalid_indices)} ligne(s) filtr√©e(s), "
                            f"{len(current_translations)} ligne(s) conserv√©e(s)"
                        )

                        # Continuer avec les lignes valides au check suivant
                        break  # Sortir de la boucle retry, passer au check suivant
                    else:
                        # Pas de lignes invalides identifi√©es ‚Üí √©chec complet
                        logger.error(
                            f"‚ùå {check.name} √©chou√© mais aucune ligne invalide identifi√©e "
                            f"(chunk {context.chunk.index})"
                        )
                        return False, current_translations, all_results

        # Tous checks OK
        logger.debug(
            f"‚úÖ Tous checks OK pour chunk {context.chunk.index} "
            f"({len(self.checks)} checks pass√©s)"
        )
        return True, current_translations, all_results

    def validate_only(self, context: ValidationContext) -> list[CheckResult]:
        """
        Valide sans corriger (mode lecture seule).

        Utile pour v√©rifier le cache sans d√©clencher de corrections.
        Ex√©cute tous les checks sans s'arr√™ter √† la premi√®re erreur.

        Args:
            context: Contexte de validation (context.llm peut √™tre None)

        Returns:
            Liste de tous les CheckResult (un par check)

        Example:
            >>> # Valider traductions en cache sans correction
            >>> context = ValidationContext(
            ...     chunk=chunk,
            ...     translated_texts=cached_translations,
            ...     original_texts=original_texts,
            ...     llm=None,  # Pas de LLM n√©cessaire
            ...     target_language="fr",
            ...     phase="initial",
            ...     max_retries=0,
            ... )
            >>>
            >>> results = pipeline.validate_only(context)
            >>> if any(not r.is_valid for r in results):
            ...     print("Cache invalide, retraduction n√©cessaire")
        """
        results: list[CheckResult] = []

        for check in self.checks:
            result = check.validate(context)
            results.append(result)

            if not result.is_valid:
                logger.debug(
                    f"‚ö†Ô∏è {check.name} √©chou√© (lecture seule): {result.error_message}"
                )

        return results

    def _build_filtered_lines(
        self,
        context: ValidationContext,
        check: Check,
        invalid_indices: set[int],
        check_name: str,
        result: CheckResult,
    ) -> None:
        """
        Construit les FilteredLine pour chaque ligne invalide et les ajoute au contexte.

        Cette m√©thode r√©cup√®re les m√©tadonn√©es depuis chunk.body (TagKey) pour
        construire des FilteredLine avec toutes les informations n√©cessaires
        (file_name, file_line, chunk_index, chunk_line).

        Args:
            context: Contexte de validation (sera modifi√© pour ajouter filtered_lines)
            invalid_indices: Set des indices de lignes invalides
            check_name: Nom du check qui a filtr√©
            result: CheckResult contenant error_message et error_data

        Example:
            >>> invalid_indices = {5, 10, 15}
            >>> self._build_filtered_lines(context, invalid_indices, "line_count", result)
            >>> # context.filtered_lines contient maintenant 3 FilteredLine
        """
        from .base import FilteredLine

        # √ânum√©rer le body pour r√©cup√©rer les TagKey
        body_items = list(context.chunk.body.items())

        for chunk_line_idx in invalid_indices:
            # V√©rifier que l'index est valide
            if chunk_line_idx >= len(body_items):
                logger.warning(
                    f"[ValidationPipeline] Index invalide {chunk_line_idx} "
                    f"(body size: {len(body_items)}), skip"
                )
                continue

            # R√©cup√©rer TagKey et texte original
            tag_key, original_text = body_items[chunk_line_idx]

            # Construire raison du filtrage depuis error_message
            reason = check.build_filter_reason(chunk_line_idx, result.error_data)

            # Construire FilteredLine
            filtered = FilteredLine(
                file_name=tag_key.page.epub_html.file_name,
                file_line=tag_key.index,  # Index du fragment dans le fichier HTML
                chunk_index=context.chunk.index,
                chunk_line=chunk_line_idx,
                check_name=check_name,
                reason=reason,
                original_text=original_text,  # Limiter √† 100 chars
                translated_text=context.translated_texts.get(chunk_line_idx, ""),
            )

            context.filtered_lines.append(filtered)

    def __repr__(self) -> str:
        """Repr√©sentation pour le debug."""
        check_names = [check.name for check in self.checks]
        return f"ValidationPipeline({check_names})"
