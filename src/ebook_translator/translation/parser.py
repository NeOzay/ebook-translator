"""
Parsing des sorties de traduction des LLM.
"""

import re
from typing import Optional

from ..config import Config


def parse_llm_translation_output(output: str) -> dict[int, str]:
    """
    Parse la sortie d'un LLM au format num√©rot√©.

    Format attendu:
        <0/>Texte traduit ligne 0...
        <1/>Texte traduit ligne 1...
        ...
        [=[END]=]

    Args:
        output: Sortie brute du LLM

    Returns:
        Dictionnaire {index: texte_traduit}

    Raises:
        ValueError: Si le format est invalide ou incomplet

    Example:
        >>> output = "<0/>Hello\\n<1/>World\\n[=[END]=]"
        >>> result = parse_llm_translation_output(output)
        >>> result
        {0: 'Hello', 1: 'World'}
    """
    output = output.strip()

    # D√©tecter les messages d'erreur du LLM
    if output.startswith("[ERREUR"):
        raise ValueError(
            f"‚ùå Le LLM a retourn√© une erreur :\n{output}\n\n"
            f"üí° Causes possibles:\n"
            f"  ‚Ä¢ Timeout du serveur\n"
            f"  ‚Ä¢ Rate limit atteint\n"
            f"  ‚Ä¢ Erreur API\n"
            f"\nüîß Solutions:\n"
            f"  ‚Ä¢ Le syst√®me va automatiquement r√©essayer\n"
            f"  ‚Ä¢ V√©rifiez les logs pour plus de d√©tails\n"
            f"  ‚Ä¢ R√©duisez le nombre de requ√™tes parall√®les"
        )

    # V√©rifier la pr√©sence du marqueur de fin
    if not output.endswith("[=[END]=]"):
        # Donner un aper√ßu de la sortie pour debug
        preview = output[:200] + "..." if len(output) > 200 else output
        raise ValueError(
            f"‚ùå Traduction incompl√®te : le marqueur [=[END]=] est manquant.\n\n"
            f"üìù Aper√ßu de la sortie LLM:\n{preview}\n\n"
            f"üí° Causes possibles:\n"
            f"  ‚Ä¢ Le LLM a √©t√© interrompu avant la fin\n"
            f"  ‚Ä¢ La limite de tokens max_tokens est trop basse\n"
            f"  ‚Ä¢ Le LLM n'a pas suivi le format demand√©\n"
            f"\nüîß Solutions:\n"
            f"  ‚Ä¢ Augmentez max_tokens dans la config LLM\n"
            f"  ‚Ä¢ R√©duisez la taille des chunks √† traduire\n"
            f"  ‚Ä¢ V√©rifiez le prompt de traduction"
        )

    # Supprimer le marqueur de fin
    output = output.replace("[=[END]=]", "").strip()

    # Expression r√©guli√®re pour capturer les segments num√©rot√©s
    # - ^<(\\d+)\\/> : capture le num√©ro de ligne
    # - (.*?) : capture le texte traduit (non-greedy)
    # - (?=^<\\d+\\/>|$) : arr√™t avant la prochaine balise ou fin
    pattern = re.compile(r"^<(\d+)\/>(.*?)(?=^<\d+\/>|$)", re.DOTALL | re.MULTILINE)

    translations: dict[int, str] = {}
    for match in pattern.finditer(output):
        line_number = int(match.group(1))
        text = match.group(2).strip()
        translations[line_number] = text

    if not translations:
        # Donner un aper√ßu de la sortie pour debug
        preview = output[:300] + "..." if len(output) > 300 else output
        raise ValueError(
            f"‚ùå Aucun segment trouv√©. Le format de la sortie LLM est invalide.\n\n"
            f"üìù Sortie re√ßue:\n{preview}\n\n"
            f"‚úÖ Format attendu:\n"
            f"  <0/>Texte traduit ligne 0\n"
            f"  <1/>Texte traduit ligne 1\n"
            f"  ...\n"
            f"  [=[END]=]\n\n"
            f"üí° Causes possibles:\n"
            f"  ‚Ä¢ Le LLM n'a pas respect√© le format de num√©rotation\n"
            f"  ‚Ä¢ Le prompt de traduction est mal configur√©\n"
            f"  ‚Ä¢ Le LLM a g√©n√©r√© du texte libre au lieu de traduire\n"
            f"\nüîß Solutions:\n"
            f"  ‚Ä¢ V√©rifiez le template de prompt ({Config().First_Pass_Template})\n"
            f"  ‚Ä¢ Consultez les logs LLM pour voir la r√©ponse compl√®te\n"
            f"  ‚Ä¢ Essayez avec un autre mod√®le LLM"
        )

    return translations


def count_expected_lines(content: str) -> int:
    """
    Compte le nombre de lignes num√©rot√©es <N/> dans le contenu source.

    Args:
        content: Contenu source envoy√© au LLM (avec balises <N/>)

    Returns:
        Nombre de lignes num√©rot√©es trouv√©es

    Example:
        >>> content = "<0/>Hello\\n<1/>World\\nContext line\\n<2/>!"
        >>> count_expected_lines(content)
        3
    """
    pattern = re.compile(r"^<(\d+)\/>", re.MULTILINE)
    matches = pattern.findall(content)
    return len(matches)


def validate_retry_indices(
    retry_translations: dict[int, str],
    expected_indices: list[int],
) -> tuple[bool, Optional[str]]:
    """
    Valide que le retry a fourni exactement les indices demand√©s.

    V√©rifie que :
    - Tous les indices attendus sont pr√©sents dans retry_translations
    - Aucun indice suppl√©mentaire/invalide n'est pr√©sent

    Args:
        retry_translations: Dictionnaire {index: texte_traduit} retourn√© par le retry
        expected_indices: Liste des indices qui devaient √™tre traduits

    Returns:
        Tuple (is_valid, error_message)
        - is_valid: True si les indices correspondent exactement, False sinon
        - error_message: Message d'erreur d√©taill√© si invalide, None sinon

    Example:
        >>> retry_trans = {5: "Hello", 10: "World"}
        >>> expected = [5, 10]
        >>> validate_retry_indices(retry_trans, expected)
        (True, None)

        >>> retry_trans = {5: "Hello", 99: "Invalid"}
        >>> expected = [5, 10]
        >>> validate_retry_indices(retry_trans, expected)
        (False, "‚ùå Le retry n'a pas fourni les indices corrects...")
    """
    expected_set = set(expected_indices)
    received_set = set(retry_translations.keys())

    missing = expected_set - received_set
    extra = received_set - expected_set

    if not missing and not extra:
        return True, None

    # Construire le message d'erreur
    error_parts = [
        "‚ùå Le retry n'a pas fourni les indices corrects:",
        f"  ‚Ä¢ Indices demand√©s: {sorted(expected_set)[:20]}{'...' if len(expected_set) > 20 else ''}",
        f"  ‚Ä¢ Indices re√ßus: {sorted(received_set)[:20]}{'...' if len(received_set) > 20 else ''}",
    ]

    if missing:
        missing_preview = sorted(missing)[:10]
        missing_str = ", ".join(f"<{i}/>" for i in missing_preview)
        if len(missing) > 10:
            missing_str += f" ... (+{len(missing) - 10} autres)"
        error_parts.append(f"  ‚Ä¢ Toujours manquants: {missing_str}")

    if extra:
        extra_preview = sorted(extra)[:10]
        extra_str = ", ".join(f"<{i}/>" for i in extra_preview)
        if len(extra) > 10:
            extra_str += f" ... (+{len(extra) - 10} autres)"
        error_parts.append(f"  ‚Ä¢ Indices invalides (non demand√©s): {extra_str}")

    error_parts.extend(
        [
            "",
            "üí° Causes possibles:",
            "  ‚Ä¢ Le LLM n'a pas respect√© la liste des lignes √† traduire",
            "  ‚Ä¢ Le LLM a traduit des lignes d√©j√† pr√©sentes (contexte)",
            "  ‚Ä¢ Erreur de num√©rotation dans la r√©ponse du LLM",
            "",
            "üîß Solutions:",
            "  ‚Ä¢ Le syst√®me va r√©essayer avec un prompt encore plus strict",
            "  ‚Ä¢ V√©rifiez les logs LLM pour voir la r√©ponse compl√®te",
        ]
    )

    return False, "\n".join(error_parts)


def validate_line_count(
    translations: dict[int, str],
    expected_count: Optional[int] = None,
    source_content: Optional[str] = None,
) -> tuple[bool, Optional[str]]:
    """
    Valide que le nombre de lignes traduites correspond au nombre attendu.

    Args:
        translations: Dictionnaire {index: texte_traduit} retourn√© par le parser
        expected_count: Nombre de lignes attendues (optionnel)
        source_content: Contenu source pour calculer expected_count automatiquement

    Returns:
        Tuple (is_valid, error_message)
        - is_valid: True si le compte est correct, False sinon
        - error_message: Message d'erreur d√©taill√© si invalide, None sinon

    Raises:
        ValueError: Si ni expected_count ni source_content n'est fourni
    """
    if expected_count is None and source_content is None:
        raise ValueError(
            "Au moins un de expected_count ou source_content doit √™tre fourni"
        )

    if expected_count is None and source_content is not None:
        expected_count = count_expected_lines(source_content)

    if expected_count is None:
        raise ValueError("expected_count n'a pas pu √™tre d√©termin√©")

    actual_count = len(translations)

    if actual_count == expected_count:
        return True, None

    # Trouver les lignes manquantes
    expected_indices = set(range(expected_count))
    actual_indices = set(translations.keys())
    missing_indices = sorted(expected_indices - actual_indices)
    extra_indices = sorted(actual_indices - expected_indices)

    error_parts = [
        f"‚ùå Nombre de lignes incorrect dans la traduction:",
        f"  ‚Ä¢ Attendu: {expected_count} lignes",
        f"  ‚Ä¢ Re√ßu: {actual_count} lignes",
    ]

    if missing_indices:
        # Afficher les premiers indices manquants
        missing_preview = missing_indices[:10]
        missing_str = ", ".join(f"<{i}/>" for i in missing_preview)
        if len(missing_indices) > 10:
            missing_str += f" ... (+{len(missing_indices) - 10} autres)"
        error_parts.append(f"  ‚Ä¢ Lignes manquantes: {missing_str}")

    if extra_indices:
        # Afficher les premiers indices en trop
        extra_preview = extra_indices[:10]
        extra_str = ", ".join(f"<{i}/>" for i in extra_preview)
        if len(extra_indices) > 10:
            extra_str += f" ... (+{len(extra_indices) - 10} autres)"
        error_parts.append(f"  ‚Ä¢ Lignes en trop: {extra_str}")

    error_parts.extend(
        [
            "",
            "üí° Causes possibles:",
            "  ‚Ä¢ Le LLM a ignor√© certaines lignes (copyright, m√©tadonn√©es, etc.)",
            "  ‚Ä¢ Le LLM a ajout√© des lignes non demand√©es",
            "  ‚Ä¢ Erreur de parsing du format",
            "",
            "üîß Solutions:",
            "  ‚Ä¢ Le syst√®me va automatiquement r√©essayer avec un prompt strict",
            "  ‚Ä¢ V√©rifiez les logs LLM pour voir quelles lignes ont √©t√© ignor√©es",
            "  ‚Ä¢ Augmentez max_tokens si la traduction est tronqu√©e",
        ]
    )

    return False, "\n".join(error_parts)
