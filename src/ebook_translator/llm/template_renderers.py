"""
Renderers encapsul√©s pour les templates Jinja2 avec typage fort.

Ce module fournit une API simplifi√©e et typ√©e pour rendre les templates,
en encapsulant toute la logique m√©tier n√©cessaire (extraction texte,
export glossaire, calculs, etc.).
"""

from typing import TYPE_CHECKING, Literal

from jinja2 import Environment, FileSystemLoader, select_autoescape

from ..config import TemplateNames

from .template_params import (
    TranslateParams,
    RefineParams,
    MissingLinesParams,
    RetryFragmentsParams,
    RetryFragmentsFlexibleParams,
    RetryPunctuationParams,
)

if TYPE_CHECKING:
    from .llm import LLM
    from ..segment import Chunk
    from ..glossary import Glossary
    from ..stores.multi_store import MultiStore


class TemplateRenderer:
    """
    Encapsule le rendu des templates avec typage fort et logique m√©tier centralis√©e.

    Cette classe simplifie l'utilisation des templates en :
    - Fournissant des m√©thodes typ√©es pour chaque template
    - Encapsulant la logique m√©tier (extraction texte, export glossaire, etc.)
    - Validant automatiquement les param√®tres requis
    - R√©duisant la duplication de code dans les modules appelants

    Example:
        >>> llm = LLM(...)
        >>> renderer = TemplateRenderer(llm)
        >>> prompt = renderer.render_translate(target_language="fr")
        >>> llm_output = llm.query(prompt, source_content)
    """

    def __init__(
        self,
        prompt_dir: str = "template",
    ):
        """
        Initialise le renderer avec une instance LLM.

        Args:
            llm: Instance LLM pour acc√©der √† render_prompt()
        """
        self.env = Environment(
            loader=FileSystemLoader(prompt_dir),
            autoescape=select_autoescape(["html", "xml"]),
        )

    # -----------------------------------
    # üîπ Rendu du template
    # -----------------------------------
    def render_prompt(self, template_name: str, **kwargs) -> str:
        """
        Rend un template Jinja2 avec les variables donn√©es.

        Note:
            Cette m√©thode est conserv√©e pour r√©trocompatibilit√©.
            Pour une API typ√©e et simplifi√©e, utilisez `self.renderer.render_XXX()`.

        Example:
            >>> # API recommand√©e (typ√©e)
            >>> prompt = llm.renderer.render_translate(target_language="fr")
            >>>
            >>> # API legacy (non typ√©e, conserv√©e pour compatibilit√©)
            >>> prompt = llm.render_prompt("translate.jinja", target_language="fr")

        Args:
            template_name: Nom du fichier template (ex: "translate.jinja")
            **kwargs: Variables √† passer au template

        Returns:
            Prompt rendu
        """
        template = self.env.get_template(template_name)
        return template.render(**kwargs)

    def render_translate(self, target_language: str) -> str:
        """
        Rend le template translate.jinja (Phase 1 - Traduction initiale).

        Ce template est utilis√© pour la premi√®re passe de traduction avec
        des gros blocs (2000 tokens par d√©faut).

        Args:
            target_language: Code langue cible ISO 639-1 (ex: "fr", "en", "es")

        Returns:
            Prompt syst√®me rendu pr√™t pour envoi au LLM

        Example:
            >>> prompt = renderer.render_translate(target_language="fr")
            >>> llm_output = llm.query(prompt, str(chunk))
        """
        params: TranslateParams = {
            "target_language": target_language,
        }
        return self.render_prompt(TemplateNames.First_Pass_Template, **params)

    def render_refine(
        self,
        chunk: "Chunk",
        multi_store: "MultiStore",
        glossary: "Glossary",
        target_language: str,
    ) -> str:
        """
        Rend le template refine.jinja (Phase 2 - Affinage avec glossaire).

        Ce template est utilis√© pour affiner les traductions initiales avec :
        - Segmentation fine (300 tokens par d√©faut)
        - Glossaire appris en Phase 1
        - Traduction initiale comme base

        La m√©thode encapsule automatiquement :
        - R√©cup√©ration traduction initiale depuis MultiStore
        - Extraction texte original (head + body + tail)
        - Export du glossaire appris
        - Calcul du nombre de lignes attendues (expected_count)

        Args:
            chunk: Chunk √† affiner (300 tokens)
            multi_store: MultiStore pour acc√®s initial_store et refined_store
            glossary: Glossary appris en Phase 1
            target_language: Code langue cible ISO 639-1

        Returns:
            Prompt syst√®me rendu pr√™t pour envoi au LLM

        Raises:
            ValueError: Si la traduction initiale est manquante (Phase 1 incompl√®te)

        Example:
            >>> prompt = renderer.render_refine(
            ...     chunk=chunk,
            ...     multi_store=multi_store,
            ...     glossary=glossary,
            ...     target_language="fr"
            ... )
            >>> llm_output = llm.query(prompt, "")  # Tout dans le prompt
        """
        # 1. R√©cup√©rer traduction initiale (Phase 1)
        initial_translation, has_missing = chunk.get_translation_for_prompt(
            multi_store.initial_store
        )
        if has_missing:
            raise ValueError(
                f"Chunk {chunk.index}: Traduction initiale manquante (Phase 1 incompl√®te)"
            )

        # 2. Extraire texte original (head + body + tail)
        original_text = str(chunk)

        # 3. Exporter glossaire appris en Phase 1
        glossary_export = glossary.export_for_prompt(max_terms=50, min_confidence=0.5)

        # 4. Calculer nombre de lignes attendues (body uniquement)
        expected_count = chunk.get_body_size()

        # 5. Construire param√®tres typ√©s
        params: RefineParams = {
            "target_language": target_language,
            "original_text": original_text,
            "initial_translation": initial_translation,
            "glossaire": glossary_export or "Aucun terme dans le glossaire.",
            "expected_count": expected_count,
        }

        return self.render_prompt(TemplateNames.Refine_Template, **params)

    def render_missing_lines(
        self,
        chunk: "Chunk",
        missing_indices: list[int],
        target_language: str,
    ) -> str:
        """
        Rend le template retry_missing_lines_targeted.jinja (Correction lignes manquantes).

        Ce template est utilis√© pour corriger les lignes manquantes d√©tect√©es
        par LineCountCheck. Seules les lignes manquantes sont num√©rot√©es,
        le reste sert de contexte.

        La m√©thode encapsule automatiquement :
        - Construction du source_content avec num√©rotation s√©lective
        - G√©n√©ration du message d'erreur contextuel
        - Formatage des indices manquants

        Args:
            chunk: Chunk source avec toutes les lignes
            missing_indices: Liste des indices de lignes manquantes √† traduire
            target_language: Code langue cible ISO 639-1

        Returns:
            Prompt syst√®me rendu pr√™t pour envoi au LLM

        Example:
            >>> prompt = renderer.render_missing_lines(
            ...     chunk=chunk,
            ...     missing_indices=[5, 7, 12],
            ...     target_language="fr"
            ... )
            >>> llm_output = llm.query(prompt, "")
        """
        # 1. Construire source_content avec num√©rotation s√©lective
        # Seules les lignes manquantes sont marqu√©es <N/>
        source_content = chunk.mark_lines_to_numbered(missing_indices)

        # 2. G√©n√©rer message d'erreur contextuel
        num_missing = len(missing_indices)
        indices_preview = ", ".join(f"<{idx}/>" for idx in missing_indices[:5])
        if num_missing > 5:
            indices_preview += f" ... (+{num_missing - 5} autres)"

        error_message = (
            f"Tu as oubli√© {num_missing} ligne(s) num√©rot√©e(s) : {indices_preview}"
        )

        params: MissingLinesParams = {
            "target_language": target_language,
            "missing_indices": missing_indices,
            "source_content": source_content,
            "error_message": error_message,
        }

        return self.render_prompt(
            TemplateNames.Missing_Lines_Targeted_Template, **params
        )

    def render_retry_fragments(
        self,
        target_language: str,
        original_text: str,
        incorrect_translation: str,
        expected_separators: int,
        actual_separators: int,
        mode: Literal["NORMAL", "FLEXIBLE"] = "NORMAL",
    ) -> str:
        """
        Rend le template de retry pour correction du nombre de fragments.

        S√©lectionne automatiquement le template appropri√© selon le mode :
        - NORMAL: retry_fragments.jinja (pr√©servation stricte des positions)
        - FLEXIBLE: retry_fragments_flexible.jinja (placement libre, m√™me nombre)

        Ce template est utilis√© pour corriger les traductions avec un nombre
        incorrect de s√©parateurs `</>`. Il affiche l'erreur d√©tect√©e et demande
        une re-traduction en respectant la structure.

        Args:
            target_language: Code langue cible ISO 639-1
            original_text: Texte source original
            incorrect_translation: Traduction produite avec nombre incorrect de s√©parateurs
            expected_separators: Nombre de s√©parateurs `</>` attendus
            actual_separators: Nombre de s√©parateurs `</>` trouv√©s dans la traduction
            mode: Mode de correction ("NORMAL" ou "FLEXIBLE"), d√©faut "NORMAL"

        Returns:
            Prompt syst√®me rendu pr√™t pour envoi au LLM

        Raises:
            ValueError: Si le mode n'est pas "NORMAL" ou "FLEXIBLE"

        Example:
            >>> # Premi√®re tentative en mode NORMAL
            >>> prompt = renderer.render_retry_fragments(
            ...     target_language="fr",
            ...     original_text="Hello</>world</>!",
            ...     incorrect_translation="Bonjour monde !",
            ...     expected_separators=2,
            ...     actual_separators=0,
            ...     mode="NORMAL"
            ... )
            >>> # Si √©chec, deuxi√®me tentative en mode FLEXIBLE
            >>> prompt = renderer.render_retry_fragments(
            ...     target_language="fr",
            ...     original_text="Hello</>world</>!",
            ...     incorrect_translation="Bonjour monde !",
            ...     expected_separators=2,
            ...     actual_separators=0,
            ...     mode="FLEXIBLE"
            ... )
        """
        if mode == "FLEXIBLE":
            params_flexible: RetryFragmentsFlexibleParams = {
                "target_language": target_language,
                "original_text": original_text,
                "incorrect_translation": incorrect_translation,
                "expected_separators": expected_separators,
                "actual_separators": actual_separators,
            }
            return self.render_prompt(
                TemplateNames.Retry_Fragments_Flexible_Template, **params_flexible
            )
        else:  # mode == "NORMAL"
            params_normal: RetryFragmentsParams = {
                "target_language": target_language,
                "original_text": original_text,
                "incorrect_translation": incorrect_translation,
                "expected_separators": expected_separators,
                "actual_separators": actual_separators,
            }
            return self.render_prompt(
                TemplateNames.Retry_Fragments_Template, **params_normal
            )

    def render_retry_punctuation(
        self,
        target_language: str,
        original_text: str,
        incorrect_translation: str,
        expected_pairs: int,
        actual_pairs: int,
    ) -> str:
        """
        Rend le template retry_punctuation.jinja (Correction paires de guillemets).

        Ce template est utilis√© pour corriger les traductions avec un nombre
        incorrect de paires de guillemets (dialogues fusionn√©s, interruptions
        narratives perdues).

        Args:
            target_language: Code langue cible ISO 639-1
            original_text: Texte source original
            incorrect_translation: Traduction avec nombre incorrect de paires
            expected_pairs: Nombre de paires de guillemets attendues
            actual_pairs: Nombre de paires trouv√©es dans la traduction

        Returns:
            Prompt syst√®me rendu pr√™t pour envoi au LLM

        Example:
            >>> prompt = renderer.render_retry_punctuation(
            ...     target_language="fr",
            ...     original_text='"Hello," he said, "world!"',
            ...     incorrect_translation='¬´ Bonjour, dit-il, monde ! ¬ª',
            ...     expected_pairs=2,
            ...     actual_pairs=1
            ... )
            >>> llm_output = llm.query(prompt, "")
        """
        params: RetryPunctuationParams = {
            "target_language": target_language,
            "original_text": original_text,
            "incorrect_translation": incorrect_translation,
            "expected_pairs": expected_pairs,
            "actual_pairs": actual_pairs,
        }

        return self.render_prompt("retry_punctuation.jinja", **params)
