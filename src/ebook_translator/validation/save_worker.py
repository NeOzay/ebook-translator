"""
Worker d√©di√© √† la sauvegarde des traductions valid√©es.

Ce module fournit un worker unique qui g√®re toutes les √©critures dans le Store,
√©liminant ainsi les conflits d'√©criture multi-thread (WinError 32 sur Windows).

Architecture:
    ValidationWorkers (N threads) ‚Üí SaveQueue ‚Üí SaveWorker (1 thread) ‚Üí Store

Le SaveWorker est le SEUL thread autoris√© √† appeler store.save_all(), garantissant
qu'aucun conflit d'acc√®s concurrent aux fichiers ne peut se produire.
"""

import queue
from typing import TYPE_CHECKING, Callable, Optional

from ..logger import get_logger
from .validation_queue import SaveQueue, SaveItem

if TYPE_CHECKING:
    from ..segment import Chunk
    from ..store import Store

logger = get_logger(__name__)


class SaveWorker:
    """
    Worker d√©di√© √† la sauvegarde des traductions valid√©es dans le Store.

    Ce worker consomme la SaveQueue et √©crit chaque item dans le Store.
    C'est le SEUL thread qui √©crit dans le Store, ce qui √©limine compl√®tement
    les probl√®mes de concurrence (WinError 32 sur Windows).

    Attributes:
        save_queue: Queue des items √† sauvegarder
        store: Store o√π √©crire les traductions
        on_validated: Callback optionnel appel√© apr√®s sauvegarde r√©ussie
        saved_count: Compteur d'items sauvegard√©s avec succ√®s
        error_count: Compteur d'erreurs de sauvegarde

    Example:
        >>> save_queue = SaveQueue(maxsize=100)
        >>> save_worker = SaveWorker(
        ...     save_queue=save_queue,
        ...     store=store,
        ...     on_validated=lambda chunk, translations: print(f"Saved {chunk.index}")
        ... )
        >>> # Lancer dans un thread
        >>> thread = threading.Thread(target=save_worker.run, daemon=True)
        >>> thread.start()
    """

    def __init__(
        self,
        save_queue: SaveQueue,
        store: "Store",
        on_validated: Optional[Callable[["Chunk", dict[int, str]], None]] = None,
    ):
        """
        Initialise le SaveWorker.

        Args:
            save_queue: Queue des items √† sauvegarder
            store: Store o√π √©crire les traductions
            on_validated: Callback optionnel appel√© apr√®s sauvegarde r√©ussie
                         avec (chunk, final_translations). Utile pour apprentissage
                         glossaire depuis traductions valid√©es.
        """
        self.save_queue = save_queue
        self.store = store
        self.on_validated = on_validated
        self.saved_count = 0
        self.error_count = 0

    def run(self) -> None:
        """
        Boucle principale du SaveWorker.

        Consomme la save_queue et √©crit chaque item dans le Store jusqu'√†
        r√©ception du signal d'arr√™t (None).

        Cette m√©thode bloque jusqu'√† ce que:
        1. Un SaveItem soit disponible dans la queue ‚Üí sauvegarde
        2. None soit re√ßu ‚Üí arr√™t gracieux

        Note:
            Cette m√©thode doit √™tre lanc√©e dans un thread s√©par√©.
            Elle NE retourne PAS tant qu'elle n'a pas re√ßu le signal d'arr√™t.
            Utilise un timeout court (0.5s) pour permettre une r√©activit√© rapide.
        """
        logger.info("üü¢ SaveWorker d√©marr√©")

        while True:
            try:
                # R√©cup√©rer prochain item (timeout court pour r√©activit√©)
                item = self.save_queue.get(timeout=0.5)

            except queue.Empty:
                # Timeout normal - continuer d'attendre
                continue

            # Si on arrive ici, on a re√ßu un item (ou None pour arr√™t)
            if item is None:  # Signal d'arr√™t
                logger.info(
                    f"üî¥ SaveWorker arr√™t√© "
                    f"(sauvegard√©s: {self.saved_count}, erreurs: {self.error_count})"
                )
                break

            # Sauvegarder l'item
            try:
                self._save_item(item)
            except Exception as e:
                # Logger l'erreur mais NE PAS crasher le worker
                # (un √©chec de sauvegarde ne doit pas bloquer tout le pipeline)
                logger.error(
                    f"‚ùå Erreur sauvegarde chunk {item.chunk.index}: {e}",
                    exc_info=True,
                )
                self.save_queue.mark_error()
                self.error_count += 1

    def _save_item(self, item: SaveItem) -> None:
        """
        Sauvegarde un item dans le Store.

        Cette m√©thode:
        1. √âcrit toutes les traductions dans le Store (via store.save_all)
        2. Marque l'item comme sauvegard√© dans la SaveQueue
        3. Appelle le callback on_validated si fourni
        4. Incr√©mente le compteur de sauvegardes

        Args:
            item: L'item √† sauvegarder (contient chunk, translations, source_files)

        Raises:
            Exception: Toute erreur de sauvegarde est propag√©e (logg√©e par run())
        """
        # 1. √âcrire dans Store (SEUL endroit o√π store.save_all() est appel√©)
        for source_file, translations in item.source_files.items():
            self.store.save_all(source_file, translations)

        # 2. Marquer comme sauvegard√©
        self.save_queue.mark_saved()
        self.saved_count += 1

        logger.debug(
            f"üíæ Chunk {item.chunk.index} sauvegard√© "
            f"({len(item.source_files)} fichier(s), {len(item.final_translations)} ligne(s))"
        )

        # 3. Callback optionnel (ex: apprentissage glossaire)
        if self.on_validated:
            try:
                self.on_validated(item.chunk, item.final_translations)
            except Exception as e:
                # Ne pas crasher si le callback √©choue
                logger.warning(
                    f"‚ö†Ô∏è Erreur dans callback on_validated pour chunk {item.chunk.index}: {e}"
                )

    def __repr__(self) -> str:
        """Repr√©sentation pour le debug."""
        return (
            f"SaveWorker(\n"
            f"  saved={self.saved_count},\n"
            f"  errors={self.error_count},\n"
            f"  queue_pending={self.save_queue.qsize()}\n"
            f")"
        )
